
1.Chrome搜索自身的DNS缓存
2.搜索操作系统自身的DNS缓存（浏览器没有找到缓存或缓存已经失效）
3.读取本地的HOST文件
4.浏览器发起一个DNS的一个系统调用
    1.宽带运营商服务器查看本身缓存
    2.运营商服务器发起一个迭代的DNS解析的请求
        运营商服务器把结果返回操作系统内核同时缓存起来
        操作系统内核把结果返回浏览器
        最终浏览器拿到域名对应的IP地址
5.浏览器获得域名对应的IP地址后，发起HTTP “三次握手”
    随机端口  TCP连接请求
6.TCP/IP连接建立起来后，浏览器就可以像服务器发送HTTP请求了
7.服务器端接受请求，根据路径参数，经过后端的处理，把处理后的结果数据返回给浏览器
8.继续相关请求，完成静态资源的获取
9.浏览器根据拿到的静态的资源，渲染出页面



HTTP请求流程   --》 请求   响应

状态码（分类）
1xx     //表示请求已经接受准备处理
2xx     //表示请求已经成功处理
3xx     //表示请求重定向
4xx     //表示客户端错误
5xx     //表示服务器端错误


常见状态码
200     //OK
400     //语法错误
401     //未授权
403     //拒绝服务
404     //请求资源不存在
500     //服务端发生不可预期的错误
503     //服务器端当前无法处理该请求，等待恢复


HTTP事件回调
HTTP该概念进阶
    什么事回调？
    什么是同步/异步？
    什么是I/O?
    什么是单线程/多线程？
    什么是阻塞/非阻塞？
    什么是事件？
    什么是事件驱动？
    什么是基于事件驱动的回调？
    什么是事件循环？

NodeJS核心思想非阻塞、单线程、事件驱动